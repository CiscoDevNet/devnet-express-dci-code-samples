<?xml version="1.0" ?><OrchExportInfo><Time>Tue Apr 24 21:32:39 UTC 2018</Time><User>John McDonough</User><Comments>Webex for Teams Message Post workflow</Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data>{"checksum":"03eaf15a24544edd14a902e88e0ce31773659d1c","data":"eyJ3b3JrZmxvd0RlZmluaXRvbnNNYXAiOnsiV2ViZXhfZm9yX1RlYW1zX01lc3NhZ2VfUG9zdCI6IntcIndvcmtmbG93TmFtZVwiOlwiV2ViZXhfZm9yX1RlYW1zX01lc3NhZ2VfUG9zdFwiLFwiY29tcG91bmRXRkRlZk1hcFwiOnt9LFwiY3VzdG9tQWN0aW9uRGVmaW5pdGlvblwiOlwie1xcXCJpZFxcXCI6MTU1LFxcXCJuYW1lXFxcIjpcXFwiV2ViZXhfZm9yX1RlYW1zX01lc3NhZ2VfUG9zdFxcXCIsXFxcInZlcnNpb25cXFwiOjAsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiXFxcIixcXFwiaXNBY3RpdmVcXFwiOnRydWUsXFxcImNvbnRleHRUeXBlXFxcIjowLFxcXCJpc1NhdmVBc1Rhc2tsZXRcXFwiOmZhbHNlLFxcXCJwdWJsaXNoQ29tcG91bmRUYXNrT3V0cHV0c1xcXCI6ZmFsc2UsXFxcInN0YXJ0dXBXb3JrZmxvd1xcXCI6ZmFsc2UsXFxcImlzTmV3Rm9sZGVyXFxcIjpmYWxzZSxcXFwibmV3Rm9sZGVyTmFtZVxcXCI6bnVsbCxcXFwiZXhpc3RpbmdGb2xkZXJOYW1lXFxcIjpudWxsLFxcXCJub09mSW5wdXRGaWVsZHNcXFwiOjAsXFxcImlzTG9ja2VkXFxcIjpmYWxzZSxcXFwiaXNIaWRkZW5cXFwiOmZhbHNlLFxcXCJmb2xkZXJOYW1lXFxcIjpcXFwiSnVzdGljZSBUZWFtXFxcIixcXFwiYWN0aXZpdHlOYW1lXFxcIjpudWxsLFxcXCJpc0FjdGl2aXR5XFxcIjpmYWxzZSxcXFwiaXNTZW5kRW1haWxOb3RpZmljYXRpb25cXFwiOmZhbHNlLFxcXCJlbWFpbElkTGlzdFxcXCI6XFxcIlxcXCIsXFxcImVtYWlsUG9saWN5XFxcIjpcXFwiTm8gZS1tYWlsXFxcIixcXFwiZW1haWxJZExpc3RUb05vdGlmeVxcXCI6XFxcIlxcXCIsXFxcImxhc3RWYWxpZGF0ZWRUaW1lXFxcIjoxNTI0NjA1NDExNzkyLFxcXCJsYXN0VmFsaWRhdGVkU3RhdHVzXFxcIjpcXFwiT0tcXFwiLFxcXCJpc0FjdGl2ZVZlcnNpb25cXFwiOnRydWUsXFxcImNyZWF0ZWREYXRlVGltZVxcXCI6MCxcXFwidmVyc2lvbkRlc2NyaXB0aW9uXFxcIjpudWxsLFxcXCJ1c2VyQXNzaWduZWRWZXJzaW9uVGFnXFxcIjpcXFwiMFxcXCIsXFxcImxhc3RNb2RpZmllZERhdGVUaW1lXFxcIjoxNTI0NjA0NDE4NTA2fVwiLFwid29ya2Zsb3dJbnB1dEZpZWxkRGVmaW5pdGlvbnNcIjpbXCJ7XFxcImZpZWxkRGVmSWRcXFwiOjE3MzQsXFxcImFjdGlvbklkXFxcIjoxNTUsXFxcIm5hbWVcXFwiOlxcXCJpbnB1dF8wX1NwYXJrX0FQSV9Ub2tlbjIzNVxcXCIsXFxcInVzZXJJbnB1dERpc3BsYXlPcmRlclxcXCI6MSxcXFwibGFiZWxcXFwiOlxcXCJXZWJleCBmb3IgVGVhbXMgQVBJIFRva2VuXFxcIixcXFwiZGVzY3JpcHRpb25cXFwiOlxcXCJcXFwiLFxcXCJpc09wdGlvbmFsXFxcIjpmYWxzZSxcXFwiZGlzcGxheU1hbmRhdG9yeVxcXCI6XFxcIlllc1xcXCIsXFxcInR5cGVcXFwiOlxcXCJnZW5fdGV4dF9pbnB1dFxcXCIsXFxcImJhc2VUeXBlXFxcIjpudWxsLFxcXCJ0eXBlRGlzcGxheVxcXCI6XFxcImdlbl90ZXh0X2lucHV0XFxcIixcXFwiaXNNdWx0aWxpbmVcXFwiOmZhbHNlLFxcXCJzaXplXFxcIjpcXFwibWVkaXVtXFxcIixcXFwiaXNDb250ZXh0VmFyaWFibGVcXFwiOmZhbHNlLFxcXCJpc0FkbWluSW5wdXRcXFwiOmZhbHNlLFxcXCJpc0R5bmFtaWNGaWx0ZXJlZElucHV0XFxcIjpmYWxzZSxcXFwiaXNNdWx0aXNlbGVjdElucHV0XFxcIjpmYWxzZSxcXFwiZmlsdGVyQ3JpdGVyaWFcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVGb3JtVmFsdWVcXFwiOm51bGwsXFxcImFkbWluSW5wdXRWYWx1ZUxPVlxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVRhYnVsYXJGaWVsZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVRhYnVsYXJQb3B1cEZpZWxkXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlVGFidWxhcldpdGhvdXRDaGVja2JveEZpZWxkXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlTXVsdGlTZWxlY3RcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVQYXNzd29yZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZURhdGVcXFwiOjAsXFxcImFkbWluSW5wdXRWYWx1ZURhdGV0aW1lXFxcIjowLFxcXCJhZG1pbklucHV0VmFsdWVOdW1iZXJcXFwiOjAsXFxcImFkbWluSW5wdXRWYWx1ZUJvb2xlYW5cXFwiOmZhbHNlLFxcXCJmb3JtTWFuYWdlZEFkbWluSW5wdXRWYWx1ZVxcXCI6bnVsbCxcXFwiYWRtaW5JbnB1dFZhbHVlTGFyZ2VGaWxlVXBsb2FkXFxcIjpcXFwiXFxcIixcXFwidmFsdWVzRGlzcGxheVxcXCI6bnVsbCxcXFwiaXNWYWx1ZU92ZXJyaWRkZW5cXFwiOmZhbHNlLFxcXCJkaXNwbGF5T3ZlcnJpZGVcXFwiOlxcXCJOb1xcXCIsXFxcIm11bHRpU2VsZWN0TGlzdEVudHJ5SWRcXFwiOi0xLFxcXCJlbmNyeXB0ZWRBZG1pbklucHV0VmFsdWVcXFwiOlxcXCIkeCQ0MzM1OTFjZTI2MzFjZTQ3Y2QzZTI0ZjVmOTAxMzI2NFxcXCIsXFxcIm9yaWdpbmFsQWRtaW5JbnB1dFZhbHVlXFxcIjpcXFwiXFxcIixcXFwiaXNNYXJrZWRGb3JEZWxldGlvblxcXCI6ZmFsc2UsXFxcImVkaXRGb3JtSW52b2tlZFxcXCI6ZmFsc2UsXFxcImlzVXNlZEluTG9vcFRhc2tcXFwiOmZhbHNlfVwiLFwie1xcXCJmaWVsZERlZklkXFxcIjoxNzM1LFxcXCJhY3Rpb25JZFxcXCI6MTU1LFxcXCJuYW1lXFxcIjpcXFwiaW5wdXRfMV9TcGFya19Sb29tMzg2XFxcIixcXFwidXNlcklucHV0RGlzcGxheU9yZGVyXFxcIjoyLFxcXCJsYWJlbFxcXCI6XFxcIldlYmV4IGZvciBUZWFtcyBTcGFjZVxcXCIsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiXFxcIixcXFwiaXNPcHRpb25hbFxcXCI6ZmFsc2UsXFxcImRpc3BsYXlNYW5kYXRvcnlcXFwiOlxcXCJZZXNcXFwiLFxcXCJ0eXBlXFxcIjpcXFwiZ2VuX3RleHRfaW5wdXRcXFwiLFxcXCJiYXNlVHlwZVxcXCI6bnVsbCxcXFwidHlwZURpc3BsYXlcXFwiOlxcXCJnZW5fdGV4dF9pbnB1dFxcXCIsXFxcImlzTXVsdGlsaW5lXFxcIjpmYWxzZSxcXFwic2l6ZVxcXCI6XFxcIm1lZGl1bVxcXCIsXFxcImlzQ29udGV4dFZhcmlhYmxlXFxcIjpmYWxzZSxcXFwiaXNBZG1pbklucHV0XFxcIjpmYWxzZSxcXFwiaXNEeW5hbWljRmlsdGVyZWRJbnB1dFxcXCI6ZmFsc2UsXFxcImlzTXVsdGlzZWxlY3RJbnB1dFxcXCI6ZmFsc2UsXFxcImZpbHRlckNyaXRlcmlhXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlRm9ybVZhbHVlXFxcIjpudWxsLFxcXCJhZG1pbklucHV0VmFsdWVMT1ZcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVUYWJ1bGFyRmllbGRcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVUYWJ1bGFyUG9wdXBGaWVsZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVRhYnVsYXJXaXRob3V0Q2hlY2tib3hGaWVsZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZU11bHRpU2VsZWN0XFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlUGFzc3dvcmRcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVEYXRlXFxcIjowLFxcXCJhZG1pbklucHV0VmFsdWVEYXRldGltZVxcXCI6MCxcXFwiYWRtaW5JbnB1dFZhbHVlTnVtYmVyXFxcIjowLFxcXCJhZG1pbklucHV0VmFsdWVCb29sZWFuXFxcIjpmYWxzZSxcXFwiZm9ybU1hbmFnZWRBZG1pbklucHV0VmFsdWVcXFwiOm51bGwsXFxcImFkbWluSW5wdXRWYWx1ZUxhcmdlRmlsZVVwbG9hZFxcXCI6XFxcIlxcXCIsXFxcInZhbHVlc0Rpc3BsYXlcXFwiOm51bGwsXFxcImlzVmFsdWVPdmVycmlkZGVuXFxcIjpmYWxzZSxcXFwiZGlzcGxheU92ZXJyaWRlXFxcIjpcXFwiTm9cXFwiLFxcXCJtdWx0aVNlbGVjdExpc3RFbnRyeUlkXFxcIjotMSxcXFwiZW5jcnlwdGVkQWRtaW5JbnB1dFZhbHVlXFxcIjpcXFwiJHgkZThiODA3ZDY1YzBlOGUxZGU4YTIwZTIwOTY0MzQwZDJcXFwiLFxcXCJvcmlnaW5hbEFkbWluSW5wdXRWYWx1ZVxcXCI6XFxcIlxcXCIsXFxcImlzTWFya2VkRm9yRGVsZXRpb25cXFwiOmZhbHNlLFxcXCJlZGl0Rm9ybUludm9rZWRcXFwiOmZhbHNlLFxcXCJpc1VzZWRJbkxvb3BUYXNrXFxcIjpmYWxzZX1cIixcIntcXFwiZmllbGREZWZJZFxcXCI6MTczNixcXFwiYWN0aW9uSWRcXFwiOjE1NSxcXFwibmFtZVxcXCI6XFxcImlucHV0XzJfU3BhcmtfTWVzc2FnZTI4M1xcXCIsXFxcInVzZXJJbnB1dERpc3BsYXlPcmRlclxcXCI6MyxcXFwibGFiZWxcXFwiOlxcXCJUaGUgTWVzc2FnZVxcXCIsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiXFxcIixcXFwiaXNPcHRpb25hbFxcXCI6ZmFsc2UsXFxcImRpc3BsYXlNYW5kYXRvcnlcXFwiOlxcXCJZZXNcXFwiLFxcXCJ0eXBlXFxcIjpcXFwiZ2VuX3RleHRfaW5wdXRcXFwiLFxcXCJiYXNlVHlwZVxcXCI6bnVsbCxcXFwidHlwZURpc3BsYXlcXFwiOlxcXCJnZW5fdGV4dF9pbnB1dFxcXCIsXFxcImlzTXVsdGlsaW5lXFxcIjpmYWxzZSxcXFwic2l6ZVxcXCI6XFxcIm1lZGl1bVxcXCIsXFxcImlzQ29udGV4dFZhcmlhYmxlXFxcIjpmYWxzZSxcXFwiaXNBZG1pbklucHV0XFxcIjpmYWxzZSxcXFwiaXNEeW5hbWljRmlsdGVyZWRJbnB1dFxcXCI6ZmFsc2UsXFxcImlzTXVsdGlzZWxlY3RJbnB1dFxcXCI6ZmFsc2UsXFxcImZpbHRlckNyaXRlcmlhXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlRm9ybVZhbHVlXFxcIjpudWxsLFxcXCJhZG1pbklucHV0VmFsdWVMT1ZcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVUYWJ1bGFyRmllbGRcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVUYWJ1bGFyUG9wdXBGaWVsZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVRhYnVsYXJXaXRob3V0Q2hlY2tib3hGaWVsZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZU11bHRpU2VsZWN0XFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlUGFzc3dvcmRcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVEYXRlXFxcIjowLFxcXCJhZG1pbklucHV0VmFsdWVEYXRldGltZVxcXCI6MCxcXFwiYWRtaW5JbnB1dFZhbHVlTnVtYmVyXFxcIjowLFxcXCJhZG1pbklucHV0VmFsdWVCb29sZWFuXFxcIjpmYWxzZSxcXFwiZm9ybU1hbmFnZWRBZG1pbklucHV0VmFsdWVcXFwiOm51bGwsXFxcImFkbWluSW5wdXRWYWx1ZUxhcmdlRmlsZVVwbG9hZFxcXCI6XFxcIlxcXCIsXFxcInZhbHVlc0Rpc3BsYXlcXFwiOm51bGwsXFxcImlzVmFsdWVPdmVycmlkZGVuXFxcIjpmYWxzZSxcXFwiZGlzcGxheU92ZXJyaWRlXFxcIjpcXFwiTm9cXFwiLFxcXCJtdWx0aVNlbGVjdExpc3RFbnRyeUlkXFxcIjotMSxcXFwiZW5jcnlwdGVkQWRtaW5JbnB1dFZhbHVlXFxcIjpcXFwiJHgkNDkzY2EwNmRkYjBhOTUzOGRlYjAxZTBkZmE2MTk3MGZcXFwiLFxcXCJvcmlnaW5hbEFkbWluSW5wdXRWYWx1ZVxcXCI6XFxcIlxcXCIsXFxcImlzTWFya2VkRm9yRGVsZXRpb25cXFwiOmZhbHNlLFxcXCJlZGl0Rm9ybUludm9rZWRcXFwiOmZhbHNlLFxcXCJpc1VzZWRJbkxvb3BUYXNrXFxcIjpmYWxzZX1cIixcIntcXFwiZmllbGREZWZJZFxcXCI6MTczNyxcXFwiYWN0aW9uSWRcXFwiOjE1NSxcXFwibmFtZVxcXCI6XFxcImlucHV0XzNfUHJveHlfSG9zdDk1MVxcXCIsXFxcInVzZXJJbnB1dERpc3BsYXlPcmRlclxcXCI6NCxcXFwibGFiZWxcXFwiOlxcXCJQcm94eSBIb3N0XFxcIixcXFwiZGVzY3JpcHRpb25cXFwiOlxcXCJcXFwiLFxcXCJpc09wdGlvbmFsXFxcIjp0cnVlLFxcXCJkaXNwbGF5TWFuZGF0b3J5XFxcIjpcXFwiWWVzXFxcIixcXFwidHlwZVxcXCI6XFxcImdlbl90ZXh0X2lucHV0XFxcIixcXFwiYmFzZVR5cGVcXFwiOm51bGwsXFxcInR5cGVEaXNwbGF5XFxcIjpcXFwiZ2VuX3RleHRfaW5wdXRcXFwiLFxcXCJpc011bHRpbGluZVxcXCI6ZmFsc2UsXFxcInNpemVcXFwiOlxcXCJtZWRpdW1cXFwiLFxcXCJpc0NvbnRleHRWYXJpYWJsZVxcXCI6ZmFsc2UsXFxcImlzQWRtaW5JbnB1dFxcXCI6ZmFsc2UsXFxcImlzRHluYW1pY0ZpbHRlcmVkSW5wdXRcXFwiOmZhbHNlLFxcXCJpc011bHRpc2VsZWN0SW5wdXRcXFwiOmZhbHNlLFxcXCJmaWx0ZXJDcml0ZXJpYVxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZUZvcm1WYWx1ZVxcXCI6bnVsbCxcXFwiYWRtaW5JbnB1dFZhbHVlTE9WXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlVGFidWxhckZpZWxkXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlVGFidWxhclBvcHVwRmllbGRcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVUYWJ1bGFyV2l0aG91dENoZWNrYm94RmllbGRcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVNdWx0aVNlbGVjdFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVBhc3N3b3JkXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlRGF0ZVxcXCI6MCxcXFwiYWRtaW5JbnB1dFZhbHVlRGF0ZXRpbWVcXFwiOjAsXFxcImFkbWluSW5wdXRWYWx1ZU51bWJlclxcXCI6MCxcXFwiYWRtaW5JbnB1dFZhbHVlQm9vbGVhblxcXCI6ZmFsc2UsXFxcImZvcm1NYW5hZ2VkQWRtaW5JbnB1dFZhbHVlXFxcIjpudWxsLFxcXCJhZG1pbklucHV0VmFsdWVMYXJnZUZpbGVVcGxvYWRcXFwiOlxcXCJcXFwiLFxcXCJ2YWx1ZXNEaXNwbGF5XFxcIjpudWxsLFxcXCJpc1ZhbHVlT3ZlcnJpZGRlblxcXCI6ZmFsc2UsXFxcImRpc3BsYXlPdmVycmlkZVxcXCI6XFxcIk5vXFxcIixcXFwibXVsdGlTZWxlY3RMaXN0RW50cnlJZFxcXCI6LTEsXFxcImVuY3J5cHRlZEFkbWluSW5wdXRWYWx1ZVxcXCI6XFxcIiR4JDY4NzY0ZDZmOWJiNjA4ZTdjZjU0ODMxOWJhYTFkNmYyXFxcIixcXFwib3JpZ2luYWxBZG1pbklucHV0VmFsdWVcXFwiOlxcXCJcXFwiLFxcXCJpc01hcmtlZEZvckRlbGV0aW9uXFxcIjpmYWxzZSxcXFwiZWRpdEZvcm1JbnZva2VkXFxcIjpmYWxzZSxcXFwiaXNVc2VkSW5Mb29wVGFza1xcXCI6ZmFsc2V9XCIsXCJ7XFxcImZpZWxkRGVmSWRcXFwiOjE3MzgsXFxcImFjdGlvbklkXFxcIjoxNTUsXFxcIm5hbWVcXFwiOlxcXCJpbnB1dF80X1Byb3h5X1BvcnQxNzZcXFwiLFxcXCJ1c2VySW5wdXREaXNwbGF5T3JkZXJcXFwiOjUsXFxcImxhYmVsXFxcIjpcXFwiUHJveHkgUG9ydFxcXCIsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiXFxcIixcXFwiaXNPcHRpb25hbFxcXCI6dHJ1ZSxcXFwiZGlzcGxheU1hbmRhdG9yeVxcXCI6XFxcIlllc1xcXCIsXFxcInR5cGVcXFwiOlxcXCJnZW5fdGV4dF9pbnB1dFxcXCIsXFxcImJhc2VUeXBlXFxcIjpudWxsLFxcXCJ0eXBlRGlzcGxheVxcXCI6XFxcImdlbl90ZXh0X2lucHV0XFxcIixcXFwiaXNNdWx0aWxpbmVcXFwiOmZhbHNlLFxcXCJzaXplXFxcIjpcXFwibWVkaXVtXFxcIixcXFwiaXNDb250ZXh0VmFyaWFibGVcXFwiOmZhbHNlLFxcXCJpc0FkbWluSW5wdXRcXFwiOmZhbHNlLFxcXCJpc0R5bmFtaWNGaWx0ZXJlZElucHV0XFxcIjpmYWxzZSxcXFwiaXNNdWx0aXNlbGVjdElucHV0XFxcIjpmYWxzZSxcXFwiZmlsdGVyQ3JpdGVyaWFcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVGb3JtVmFsdWVcXFwiOm51bGwsXFxcImFkbWluSW5wdXRWYWx1ZUxPVlxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVRhYnVsYXJGaWVsZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZVRhYnVsYXJQb3B1cEZpZWxkXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlVGFidWxhcldpdGhvdXRDaGVja2JveEZpZWxkXFxcIjpcXFwiXFxcIixcXFwiYWRtaW5JbnB1dFZhbHVlTXVsdGlTZWxlY3RcXFwiOlxcXCJcXFwiLFxcXCJhZG1pbklucHV0VmFsdWVQYXNzd29yZFxcXCI6XFxcIlxcXCIsXFxcImFkbWluSW5wdXRWYWx1ZURhdGVcXFwiOjAsXFxcImFkbWluSW5wdXRWYWx1ZURhdGV0aW1lXFxcIjowLFxcXCJhZG1pbklucHV0VmFsdWVOdW1iZXJcXFwiOjAsXFxcImFkbWluSW5wdXRWYWx1ZUJvb2xlYW5cXFwiOmZhbHNlLFxcXCJmb3JtTWFuYWdlZEFkbWluSW5wdXRWYWx1ZVxcXCI6bnVsbCxcXFwiYWRtaW5JbnB1dFZhbHVlTGFyZ2VGaWxlVXBsb2FkXFxcIjpcXFwiXFxcIixcXFwidmFsdWVzRGlzcGxheVxcXCI6bnVsbCxcXFwiaXNWYWx1ZU92ZXJyaWRkZW5cXFwiOmZhbHNlLFxcXCJkaXNwbGF5T3ZlcnJpZGVcXFwiOlxcXCJOb1xcXCIsXFxcIm11bHRpU2VsZWN0TGlzdEVudHJ5SWRcXFwiOi0xLFxcXCJlbmNyeXB0ZWRBZG1pbklucHV0VmFsdWVcXFwiOlxcXCIkeCRhODllYzM1YTZiOWE2ZGNjYWQyNGIyNzEzMTZjMzc2NFxcXCIsXFxcIm9yaWdpbmFsQWRtaW5JbnB1dFZhbHVlXFxcIjpcXFwiXFxcIixcXFwiaXNNYXJrZWRGb3JEZWxldGlvblxcXCI6ZmFsc2UsXFxcImVkaXRGb3JtSW52b2tlZFxcXCI6ZmFsc2UsXFxcImlzVXNlZEluTG9vcFRhc2tcXFwiOmZhbHNlfVwiXSxcImZpZWxkVG9Vc2VySW5wdXRTZWxlY3RvckJpbmRpbmdNYXBcIjp7XCIxNjI2XCI6W1wie1xcXCJmaWVsZE5hbWVcXFwiOlxcXCJwcm94eVBvcnRcXFwiLFxcXCJpc0JvdW5kVG9JbnB1dFxcXCI6dHJ1ZSxcXFwiaW5wdXRGaWVsZElkXFxcIjpcXFwiaW5wdXRfNF9Qcm94eV9Qb3J0MTc2XFxcIixcXFwiaW5wdXRGaWVsZFZhbHVlXFxcIjpcXFwiMFxcXCIsXFxcImNvbmZpZ0VudHJ5SWRcXFwiOjE2MjYsXFxcImFjdGlvbklkXFxcIjoxNTUsXFxcImV4cG9ydFRhc2tSZWZlcmVuY2VcXFwiOm51bGx9XCIsXCJ7XFxcImZpZWxkTmFtZVxcXCI6XFxcImZpbGVcXFwiLFxcXCJpc0JvdW5kVG9JbnB1dFxcXCI6ZmFsc2UsXFxcImlucHV0RmllbGRJZFxcXCI6bnVsbCxcXFwiaW5wdXRGaWVsZFZhbHVlXFxcIjpudWxsLFxcXCJjb25maWdFbnRyeUlkXFxcIjoxNjI2LFxcXCJhY3Rpb25JZFxcXCI6MTU1LFxcXCJleHBvcnRUYXNrUmVmZXJlbmNlXFxcIjpudWxsfVwiLFwie1xcXCJmaWVsZE5hbWVcXFwiOlxcXCJtZXNzYWdlSWRcXFwiLFxcXCJpc0JvdW5kVG9JbnB1dFxcXCI6ZmFsc2UsXFxcImlucHV0RmllbGRJZFxcXCI6bnVsbCxcXFwiaW5wdXRGaWVsZFZhbHVlXFxcIjpudWxsLFxcXCJjb25maWdFbnRyeUlkXFxcIjoxNjI2LFxcXCJhY3Rpb25JZFxcXCI6MTU1LFxcXCJleHBvcnRUYXNrUmVmZXJlbmNlXFxcIjpudWxsfVwiLFwie1xcXCJmaWVsZE5hbWVcXFwiOlxcXCJtZXNzYWdlXFxcIixcXFwiaXNCb3VuZFRvSW5wdXRcXFwiOnRydWUsXFxcImlucHV0RmllbGRJZFxcXCI6XFxcImlucHV0XzJfU3BhcmtfTWVzc2FnZTI4M1xcXCIsXFxcImlucHV0RmllbGRWYWx1ZVxcXCI6XFxcIjBcXFwiLFxcXCJjb25maWdFbnRyeUlkXFxcIjoxNjI2LFxcXCJhY3Rpb25JZFxcXCI6MTU1LFxcXCJleHBvcnRUYXNrUmVmZXJlbmNlXFxcIjpudWxsfVwiLFwie1xcXCJmaWVsZE5hbWVcXFwiOlxcXCJwcm94eUhvc3RcXFwiLFxcXCJpc0JvdW5kVG9JbnB1dFxcXCI6dHJ1ZSxcXFwiaW5wdXRGaWVsZElkXFxcIjpcXFwiaW5wdXRfM19Qcm94eV9Ib3N0OTUxXFxcIixcXFwiaW5wdXRGaWVsZFZhbHVlXFxcIjpcXFwiMFxcXCIsXFxcImNvbmZpZ0VudHJ5SWRcXFwiOjE2MjYsXFxcImFjdGlvbklkXFxcIjoxNTUsXFxcImV4cG9ydFRhc2tSZWZlcmVuY2VcXFwiOm51bGx9XCIsXCJ7XFxcImZpZWxkTmFtZVxcXCI6XFxcInJvb21JZFxcXCIsXFxcImlzQm91bmRUb0lucHV0XFxcIjp0cnVlLFxcXCJpbnB1dEZpZWxkSWRcXFwiOlxcXCJpbnB1dF8xX1NwYXJrX1Jvb20zODZcXFwiLFxcXCJpbnB1dEZpZWxkVmFsdWVcXFwiOlxcXCIwXFxcIixcXFwiY29uZmlnRW50cnlJZFxcXCI6MTYyNixcXFwiYWN0aW9uSWRcXFwiOjE1NSxcXFwiZXhwb3J0VGFza1JlZmVyZW5jZVxcXCI6bnVsbH1cIixcIntcXFwiZmllbGROYW1lXFxcIjpcXFwidG9rZW5cXFwiLFxcXCJpc0JvdW5kVG9JbnB1dFxcXCI6dHJ1ZSxcXFwiaW5wdXRGaWVsZElkXFxcIjpcXFwiaW5wdXRfMF9TcGFya19BUElfVG9rZW4yMzVcXFwiLFxcXCJpbnB1dEZpZWxkVmFsdWVcXFwiOlxcXCIwXFxcIixcXFwiY29uZmlnRW50cnlJZFxcXCI6MTYyNixcXFwiYWN0aW9uSWRcXFwiOjE1NSxcXFwiZXhwb3J0VGFza1JlZmVyZW5jZVxcXCI6bnVsbH1cIl19LFwiY3VzdG9tQWN0aW9uQ29uZmlnRW50cmllc1wiOltcIntcXFwidGFza05hbWVcXFwiOlxcXCJjdXN0b21fV2ViZXhfZm9yX1RlYW1zX21lc3NhZ2VzX2NyZWF0ZV8xNjIyXFxcIixcXFwiY29uZmlnRW50cnlJZFxcXCI6MTYyNixcXFwiYWN0aW9uSWRcXFwiOjE1NSxcXFwidmVyc2lvbklkXFxcIjotMSxcXFwiY3VzdEFjdGlvbk9yZGVyXFxcIjoxNjIyLFxcXCJhYm9ydElmRmFpbGVkXFxcIjpmYWxzZSxcXFwiaGFuZGxlclR5cGVcXFwiOlxcXCJjdXN0b21fV2ViZXhfZm9yX1RlYW1zX21lc3NhZ2VzX2NyZWF0ZVxcXCIsXFxcImNvbW1lbnRcXFwiOlxcXCJcXFwiLFxcXCJzdWNjZXNzQWN0aW9uVHlwZVxcXCI6MSxcXFwic3VjY2Vzc1N0ZXBJZFxcXCI6LTEsXFxcImZhaWx1cmVBY3Rpb25UeXBlXFxcIjoyLFxcXCJmYWlsdXJlU3RlcElkXFxcIjotMSxcXFwiaXNTdGFydGluZ1Rhc2tcXFwiOnRydWUsXFxcImlzUmV0cnlPbkV4Y2VwdGlvblxcXCI6ZmFsc2UsXFxcInJldHJ5RnJlcXVlbmN5XFxcIjpudWxsLFxcXCJyZXRyeUNvdW50XFxcIjowLFxcXCJleHBvcnRSZWZlcmVuY2VcXFwiOm51bGwsXFxcImV4cG9ydFN1Y2Nlc3NSZWZlcmVuY2VcXFwiOlxcXCItMVxcXCIsXFxcImV4cG9ydEZhaWx1cmVSZWZlcmVuY2VcXFwiOlxcXCItMVxcXCIsXFxcInNlcnZpY2VSZXF1ZXN0QXNzZXRDaGFuZ2VFbnRyeUlkXFxcIjotMSxcXFwiZGlzYWJsZVJvbGxCYWNrXFxcIjpmYWxzZSxcXFwiZXh0ZW5kaW5nQ29uZmlnRW50cnlJZFxcXCI6MCxcXFwiaXNFeHRlbmRpbmdDb25maWdFbnRyeVByaW1hcnlcXFwiOmZhbHNlLFxcXCJjb25kaXRpb25Db25maWdFbnRyaWVzXFxcIjpudWxsLFxcXCJjb25kaXRpb25Db25maWdFbnRyaWVzQXNKc29uXFxcIjpudWxsLFxcXCJjb25maWdFbnRyeVRhc2tUeXBlXFxcIjotMX1cIl0sXCJhZGFwdGVyVGFza0VudHJpZXNcIjpudWxsLFwiY3VzdG9tQWN0aW9uQ29uZmlnTWFwXCI6e1wiMTYyNlwiOlwie1xcXCJhY3Rpb25JZFxcXCI6MTU1LFxcXCJjb25maWdFbnRyeUlkXFxcIjoxNjI2LFxcXCJ0b2tlblxcXCI6XFxcIlxcXCIsXFxcIm1lc3NhZ2VcXFwiOlxcXCJcXFwiLFxcXCJyb29tSWRcXFwiOlxcXCJcXFwiLFxcXCJmaWxlXFxcIjpcXFwiXFxcIixcXFwicHJveHlIb3N0XFxcIjpcXFwiXFxcIixcXFwicHJveHlQb3J0XFxcIjpcXFwiXFxcIixcXFwicm9sbGJhY2tcXFwiOjB9XCJ9LFwiY3VzdG9tYUFwcHJvdmFsVGFza0RlZk1hcFwiOm51bGwsXCJjdXN0b21hQXBwcm92YWxUYXNrSW5wdXREZWZNYXBcIjpudWxsLFwiaW5wdXRGaWVsZE11bHRpU2VsZWN0TGlzdE1hcHBpbmdcIjp7fSxcImN1c3RvbUlucHV0RGVmaW5pdGlvbnNcIjpudWxsLFwiY3VzdG9tSW5wdXRMb3ZEZWZNYXBcIjpudWxsLFwibWFwcGFibGVXb3JrZmxvd091dHB1dEZpZWxkRGVmaW5pdGlvbnNcIjpudWxsLFwiY29uZGl0aW9uc1wiOnt9fSJ9fQ=="}</data></featureAssetEntry><type>WORKFLOWS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"Webex_for_Teams_messages_create","taskLabel":"Create message in Webex for Teams Space","isActive":true,"taskSummary":"Post a message to a Webex for Teams Space.\n","taskDescription":"Post a message to a room.\n\nPosts a plain text message, and optionally a media content attachment, to a room.","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 7 inputs\r\n   token (Label: \'token\', Type: text, MappableType: gen_text_input)\r\n   message (Label: \'message\', Type: text, MappableType: gen_text_input)\r\n   roomId (Label: \'roomId\', Type: text, MappableType: gen_text_input)\r\n   file (Label: \'file\', Type: text, MappableType: gen_text_input)\r\n   proxyHost (Label: \'proxyHost\', Type: text, MappableType: gen_text_input)\r\n   proxyPort (Label: \'proxyPort\', Type: text, MappableType: gen_text_input)\r\n   rollback (Label: \'rollback\', Type: number, MappableType: )\r\n\r\nTask contains 1 outputs\r\n   messageId (Description: \'messageId\', Type: gen_text_input)\r\nisRepoUsed: falseRepo file: Repo: script: //=================================================================\n// Title:               Spark_messages_post\n// Description:         This will post a message to a specific spark group\n//\n// Author:              Rob Edwards (@clijockey/robedwa@cisco.com)\n// Date:                18/12/2015\n// Version:             1.3 (updated 27/01/2016)\n// Dependencies:\n// Limitations/issues:  Updated for UCSD 5.4 and tested on 5.4.0.1\n//=================================================================\n\nimportPackage(java.util);\nimportPackage(java.lang);\nimportPackage(java.io);\nimportPackage(com.cloupia.lib.util);\nimportPackage(org.apache.commons.httpclient);\nimportPackage(org.apache.commons.httpclient.cookie);\nimportPackage(org.apache.commons.httpclient.methods);\nimportPackage(org.apache.commons.httpclient.auth);\nimportPackage(org.apache.commons.httpclient.protocol);\nimportClass(org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory);\nimportPackage(com.cloupia.lib.cIaaS.vcd.api);\n\n//----------------------------------------------------------------------------------------\n//\n//        Author: Russ Whitear (rwhitear@cisco.com)\n//\n// Function Name: httpRequest()\n//\n//       Version: 3.0\n//\n// Modifications: Added HTTP header Connection:close to execute method to overcome the\n//                CLOSE_WAIT issue caused with releaseConnection().\n//\n//                Modified SSL socket factory code to work with UCS Director 5.4.0.0.\n//\n//   Description: HTTP Request function - httpRequest.\n//\n//                I have made the httpClient functionality more object like in order to\n//                make cloupia scripts more readable when making many/multiple HTTP/HTTPS\n//                requests within a single script.\n//\n//      Usage: 1. var request = new httpRequest();                   // Create new object.\n//\n//             2. request.setup(\"192.168.10.10\",\"https\",\"admin\",\"cisco123\");      // SSL.\n//          or:   request.setup(\"192.168.10.10\",\"http\",\"admin\",\"cisco123\");       // HTTP.\n//          or:   request.setup(\"192.168.10.10\",\"https\");           // SSL, no basicAuth.\n//          or:   request.setup(\"192.168.10.10\",\"http\");            // HTTP, no basicAuth.\n//\n//             3. request.getRequest(\"/\");                    // HTTP GET (URI).\n//          or:   request.postRequest(\"/\",\"some body text\");  // HTTP POST (URI,BodyText).\n//          or:   request.deleteRequest(\"/\");                 // HTTP DELETE (URI).\n//\n//  (optional) 4. request.contentType(\"json\");            // Add Content-Type HTTP header.\n//          or:   request.contentType(\"xml\");\n//\n//  (optional) 5. request.addHeader(\"X-Cloupia-Request-Key\",\"1234567890\");  // Any Header.\n//\n//             6. var statusCode = request.execute();                     // Send request.\n//\n//             7. var response = request.getResponse(\"asString\");   // Response as string.\n//          or:   var response = request.getResponse(\"asStream\");   // Response as stream.\n//\n//             8. request.disconnect();                             // Release connection.\n//\n//\n//          Note: Be sure to add these lines to the top of your script:\n//\n//          importPackage(java.util);\n//          importPackage(com.cloupia.lib.util);\n//          importPackage(org.apache.commons.httpclient);\n//          importPackage(org.apache.commons.httpclient.cookie);\n//          importPackage(org.apache.commons.httpclient.methods);\n//          importPackage(org.apache.commons.httpclient.auth);\n//          importPackage(org.apache.commons.httpclient.protocol);\n//          importClass(org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory);\n//          importPackage(com.cloupia.lib.cIaaS.vcd.api);\n//\n//----------------------------------------------------------------------------------------\n\nvar httpRequest = function () {};\n\nhttpRequest.prototype.setup = function(serverIp, transport, username, password) {\n    this.serverIp = serverIp;\n    this.transport = transport;\n    this.username = username;\n    this.password = password;\n\n    this.httpClient = new HttpClient();\n\n    // Decide whether to create an HTTP or HTTPS connection based up \'transport\'.\n    if( this.transport == \"https\" ) {\n\t\tthis.httpClient = CustomEasySSLSocketFactory.getIgnoreSSLClient(this.serverIp, 443);\n\n        // Set proxy configuration if proxy info has been passed to the task\n        if (proxyHost) {\n            logger.addInfo(\"Proxy configuration has been passed, adding - \"+proxyHost+\":\"+proxyPort);\n            this.httpClient.getHostConfiguration().setProxy(proxyHost, proxyPort);\n        }\n\n\t\tthis.httpClient.getParams().setCookiePolicy(\"default\");\n    } else {\n        // Create new HTTP connection.\n        this.httpClient.getHostConfiguration().setHost(this.serverIp, 80, \"http\");\n    }\n\n    this.httpClient.getParams().setCookiePolicy(\"default\");\n\n    // If username and password supplied, then use basicAuth.\n    if( this.username && this.password ) {\n        this.httpClient.getParams().setAuthenticationPreemptive(true);\n        this.defaultcreds = new UsernamePasswordCredentials(this.username, this.password);\n        this.httpClient.getState().setCredentials(new AuthScope(this.serverIp, -1, null), this.defaultcreds);\n    }\n};\n\nhttpRequest.prototype.contentType = function(contentType) {\n    this.contentType = contentType;\n\n    this.contentTypes = [\n        [\"xml\",\"application/xml\"],\n        [\"json\",\"application/json\"]\n    ];\n\n    for( this.i=0; this.i<this.contentTypes.length; this.i++)\n        if(this.contentTypes[this.i][0] == this.contentType) {\n            this.httpMethod.addRequestHeader(\"Content-Type\", this.contentTypes[this.i][1]);\n            this.httpMethod.addRequestHeader(\"Accept\", this.contentTypes[this.i][1]);\n        }\n};\n\nhttpRequest.prototype.addHeader = function(headerName,headerValue) {\n    this.headerName = headerName;\n    this.headerValue = headerValue;\n\n    this.httpMethod.addRequestHeader(this.headerName, this.headerValue);\n};\n\nhttpRequest.prototype.execute = function() {\n    // Connection:close is hard coded here in order to ensure that the TCP connection\n    // gets torn down immediately after the request. Comment this line out if you wish to\n    // experiment with HTTP persistence.\n    this.httpMethod.addRequestHeader(\"Connection\", \"close\");\n\n    this.httpClient.executeMethod(this.httpMethod);\n\n    // Retrieve status code.\n    this.statusCode = this.httpMethod.getStatusCode();\n\n    return this.statusCode;\n}\n\nhttpRequest.prototype.getRequest = function(uri) {\n    this.uri = uri;\n\n    // Get request.\n    this.httpMethod = new GetMethod(this.uri);\n};\n\nhttpRequest.prototype.postRequest = function(uri,bodytext) {\n    this.uri = uri;\n    this.bodytext = bodytext;\n\n    // POST Request.\n    this.httpMethod = new PostMethod(this.uri);\n    this.httpMethod.setRequestEntity(new StringRequestEntity(this.bodytext));\n};\n\nhttpRequest.prototype.getResponse = function(asType) {\n    this.asType = asType;\n\n    if( this.asType == \"asStream\" )\n        return this.httpMethod.getResponseBodyAsStream();\n    else\n        return this.httpMethod.getResponseBodyAsString();\n};\n\nhttpRequest.prototype.deleteRequest = function(uri) {\n    this.uri = uri;\n\n    // Get request.\n    this.httpMethod = new DeleteMethod(this.uri);\n};\n\nhttpRequest.prototype.disconnect = function() {\n    // Release connection.\n    this.httpMethod.releaseConnection();\n};\n\n\n\nfunction statusCheck(statusCode) {\n  //----------------------------------------------------------------------------\n  // Author:      Rob Edwards (@clijockey/robedwa@cisco.com)\n  // Description: Check the status code after Spark API call\n  //----------------------------------------------------------------------------\n\n  if ((statusCode == 200) || (statusCode == 204)) {\n      logger.addInfo(\"All looks good. HTTP response code: \"+statusCode);\n      return\n  } else if (statusCode == 400) {\n        logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n        logger.addInfo(\"Return code \"+statusCode+\": The request was invalid or cannot be otherwise served. An accompanying error message will explain further.\");\n        logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n        // Set this task as failed.\n        ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 401) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": Authentication credentials were missing or incorrect.\");\n      logger.addEror(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 403) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": The request is understood, but it has been refused or access is not allowed.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 404) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": The URI requested is invalid or the resource requested, such as a user, does not exist. Also returned when the requested format is not supported by the requested method.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 409) {\n      logger.addWarn(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": The request could not be processed because it conflicts with some established rule of the system. For example, a person may not be added to a room more than once.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 500) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": Something went wrong on the server.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else if (statusCode == 501) {\n      logger.addError(\"Failed to configure Spark. HTTP response code: \"+statusCode);\n      logger.addInfo(\"Return code \"+statusCode+\": Server is overloaded with requests. Try again later.\");\n      logger.addError(\"Response received: \"+request.getResponse(\"asString\"));\n      // Set this task as failed.\n      ctxt.setFailed(\"Request failed.\");\n  } else {\n      logger.addError(\"An unknown response code has occured therefore exiting: \"+statusCode);\n      ctxt.setFailed(\"Request failed.\");\n  }\n}\n\nfunction clean(response, toClean) {\n  //----------------------------------------------------------------------------\n  // Author:      Rob Edwards (@clijockey/robedwa@cisco.com)\n  // Description: Clean up the response by stripping out the extra \"\"\n  //----------------------------------------------------------------------------\n  this.response = response;\n  this.toClean = toClean;\n\n  logger.addInfo(\"Running through a clean up to ontain the \"+toClean+\" value.\");\n  this.cleaned = new String();\n  this.cleaned = JSON.getJsonElement(this.response, this.toClean).toString().replace(/\"/g, \"\");\n  logger.addInfo(\"Value cleaned up, returning :\"+this.cleaned);\n  return this.cleaned;\n}\n\nfunction getRoomIdFromName(token, roomId) {\n    this.destination = \"api.ciscospark.com\";\n    this.token = token;\n    this.roomId = roomId;\n    \n    var request = new httpRequest();\n    request.setup(this.destination,\"https\");\n    request.getRequest(\'/v1/rooms\');\n    request.contentType(\"json\");\n    request.addHeader(\"Authorization\", \"Bearer \" + this.token);\n\n    var statusCode = request.execute();\n    statusCheck(statusCode);\n\n    this.value = request.getResponse(\"asString\");\n    logger.addInfo(\"Raw returned vaules: \" +value);\n\n    var sparkroomid = \"none\";\n    var sparkroomtitle = \"none\";\n    var data = JSON.getJsonElement(value, null);\n    var jsonData = JSON.getJsonElement(data, \"items\")\n    for (var i = 0; i < jsonData.size(); i++) {\n        \n        if (JSON.getJsonElement(jsonData.get(i), \"title\").toString().replace(/\"/g, \"\") == this.roomId) {\n            logger.addInfo(\"Spark Room:      \" + this.roomId + \" Found!\" );\n            sparkroomtitle = JSON.getJsonElement(jsonData.get(i), \"title\").toString().replace(/\"/g, \"\");\n            sparkroomid = JSON.getJsonElement(jsonData.get(i), \"id\").toString().replace(/\"/g, \"\");\n            logger.addInfo(\"Spark Room Id:   \"+sparkroomid);\n            logger.addInfo(\"Spark Room Name: \"+sparkroomtitle);\n            break;\n        }\n    }\n\n    request.disconnect();\n    logger.addInfo(\"Returning this Spark Room Id:   \"+sparkroomid);\n    return sparkroomid;\n    //return \"Y2lzY29zcGFyazovL3VzL1JPT00vY2QyZDY1YTAtNzIzZi0xMWU3LThlYjYtY2YyMjhiZGY5OTRm\";\n}\nfunction messagePost(token,roomId,message,file) {\n  //----------------------------------------------------------------------------\n  // Author:      Rob Edwards (@clijockey/robedwa@cisco.com)\n  // Description: Post a message into a Spark Room\n  //----------------------------------------------------------------------------\n    this.destination = \"api.ciscospark.com\";\n    this.token = token;\n    this.roomId = roomId;\n    this.message = message;\n    this.file = file;\n\n    // Construct JSON:\n    var body = new HashMap();\n    body.put(\"roomId\", roomId);\n\n    // Check if this will be posting a message and/or file to the room\n    if (!message.equals(\"\")) {\n      body.put(\"text\", message);\n    }\n    if (!file.equals(\"\")) {\n      body.put(\"file\", file);\n    }\n    var jsonBody = JSON.javaToJsonString(body, body.getClass());\n    logger.addInfo(\"Sending JSON: \" + jsonBody);\n\n    // Make Rest call\n    var request = new httpRequest();\n    request.setup(this.destination,\"https\");\n    request.postRequest(\'/v1/messages\', jsonBody);\n    request.contentType(\"json\");\n    request.addHeader(\"Authorization\", \"Bearer \" + token);\n\n    var statusCode = request.execute();\n    statusCheck(statusCode);\n\n    this.value = request.getResponse(\"asString\");\n    logger.addInfo(\"Raw returned vaules: \"+this.value);\n\n    this.messageId = clean(value, \"id\");\n\n    request.disconnect();\n    return [messageId];\n}\n\nfunction registerUndoTask(token,messageId) {\n    // register undo task\n    var undoHandler = \"custom_Spark_messages_delete\";\n    var undoContext = ctxt.createInnerTaskContext(undoHandler);\n    var undoConfig = undoContext.getConfigObject();\n\n    // These are the variables that the rollback wf task gets called with.\n    undoConfig.token = token;\n    undoConfig.messageId = messageId;\n    undoConfig.proxyHost = proxyHost;\n    undoConfig.proxyPort = proxyPort;\n\n    ctxt.getChangeTracker().undoableResourceModified(\"Rollback post message\",\n                \"\",\"rollback \",\n                \"Rollback \"+messageId+\".\",undoHandler,undoConfig);\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////\n\n// main();\n\n// Workflow Inputs.\nvar token = input.token;\nvar message = input.message;\nvar file = input.file;\nvar roomId = input.roomId;\nvar proxyHost = input.proxyHost;\nvar proxyPort = input.proxyPort;\n\n\nvar sparkRoomId = getRoomIdFromName(token, roomId);\n\nif (sparkRoomId == \"none\") {\n    logger.addInfo(\"Room not found - room: \"+roomId+ \" was not found\");\n    // Set this task as failed.\n    ctxt.setFailed(\"Request failed.\");\n} else {\n\n    var result = messagePost(token,sparkRoomId,message,file);\n    logger.addInfo(\"Result: \"+result);\n\n    if (result)\n        logger.addInfo(\"Successfully posted message\");\n        output.messageId = result[0];\n}\n\n// Register rollback task, this is an optional setting.\nif (input.rollback == 1) {\n    registerUndoTask(token,result[0]);\n    logger.addInfo(\"The rollback option has been enabled, you will be able to rollback to poting of the message.\");\n} else {\n    logger.addInfo(\"You will not be able to rollback the post message task due to \'no rollback\' being selected.\");\n}\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>